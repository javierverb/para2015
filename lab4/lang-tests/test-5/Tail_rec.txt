5-Recursión a la Cola:

En este punto mostraremos qué lenguajes tienen optimización
de llamada a la cola (tail call optimization) partiendo del lenguaje python por medio del siguiente código:

# encoding: utf-8
def tail_rec(number):
    if number == 0:
        raise Exception("Hey! show the stack")
    else:
        return 1 + tail_rec(number-1)

tail_rec(5)

Puesto que una forma rápida de ver las llamadas al stack en ciertos lenguajes es generando una excepción, eso mismo utilizamos en este caso.
Si el lenguaje optimizara las llamadas a la cola, nuestro programa, tendría un tamaño de stack constante.

La salida en pantalla que se obtuvo al ejecutar el código es:
 $ python tail_recursion.py
Traceback (most recent call last):
  File "tail_recursion.py", line 8, in <module>
    tail_rec(5)
  File "tail_recursion.py", line 6, in tail_rec
    return 1 + tail_rec(number-1)
  File "tail_recursion.py", line 6, in tail_rec
    return 1 + tail_rec(number-1)
  File "tail_recursion.py", line 6, in tail_rec
    return 1 + tail_rec(number-1)
  File "tail_recursion.py", line 6, in tail_rec
    return 1 + tail_rec(number-1)
  File "tail_recursion.py", line 6, in tail_rec
    return 1 + tail_rec(number-1)
  File "tail_recursion.py", line 4, in tail_rec
    raise Exception("Hey! show the stack")
Exception: Hey! show the stack

Sin embargo, ni aunque utilizáramos un acumulador logramos un stack constante:

# encoding: utf-8
def tail_rec_optimized(number, acc):
    if number == 0:
        raise Exception("Hey! show the stack")
    else:
        return tail_rec_optimized(number-1, acc+1)

tail_rec_optimized(5, 0)

Puesto que
La salida en pantalla que se obtuvo al ejecutar el código es:

$ python tail_recursion_optimized.py 
Traceback (most recent call last):
  File "tail_recursion_optimized.py", line 8, in <module>
    tail_rec_optimized(5, 0)
  File "tail_recursion_optimized.py", line 6, in tail_rec_optimized
    return tail_rec_optimized(number-1, acc+1)
  File "tail_recursion_optimized.py", line 6, in tail_rec_optimized
    return tail_rec_optimized(number-1, acc+1)
  File "tail_recursion_optimized.py", line 6, in tail_rec_optimized
    return tail_rec_optimized(number-1, acc+1)
  File "tail_recursion_optimized.py", line 6, in tail_rec_optimized
    return tail_rec_optimized(number-1, acc+1)
  File "tail_recursion_optimized.py", line 6, in tail_rec_optimized
    return tail_rec_optimized(number-1, acc+1)
  File "tail_recursion_optimized.py", line 4, in tail_rec_optimized
    raise Exception("Hey! show the stack")
Exception: Hey! show the stack
___

Para el caso de C, el compilador brinda la posibilidad de optimizar hasta en tres niveles distintos. Sin embargo, para un programa recursivo sin acumulador ni flags de optimización, genera un trace normal recursivo no optimizado.
Para poder ver el traceback del stack, utilizamos GDB.

#include <stdio.h>
int tail_rec(int number) {
    if (number == 0) {
        // break here! 
        return 1;
    }
    else {
        return 1 + tail_rec(number-1);
    }
}

int main() {
    int result = tail_rec(10);
    printf("tail_rec(10) result is: %d\n", result);
    return 0;
}

// con -O1 va como piña

La salida en pantalla que se obtuvo al ejecutar el código es:
$ gcc -g tail_recursion.c -o t_rec && gdb t_rec
(gdb) b 4
Punto de interrupción 1 at 0x40053e: file tail_recursion.c, line 4.
(gdb) bt
No stack.
(gdb) run
Starting program: /home/javier/Escritorio/para2015/lab4/lang-tests/test-5/t_rec 

Breakpoint 1, tail_rec (number=0) at tail_recursion.c:5
5           return 1;
(gdb) bt
#0  tail_rec (number=0) at tail_recursion.c:5
#1  0x0000000000400552 in tail_rec (number=1) at tail_recursion.c:8
#2  0x0000000000400552 in tail_rec (number=2) at tail_recursion.c:8
#3  0x0000000000400552 in tail_rec (number=3) at tail_recursion.c:8
#4  0x0000000000400552 in tail_rec (number=4) at tail_recursion.c:8
#5  0x0000000000400552 in tail_rec (number=5) at tail_recursion.c:8
#6  0x0000000000400552 in tail_rec (number=6) at tail_recursion.c:8
#7  0x0000000000400552 in tail_rec (number=7) at tail_recursion.c:8
#8  0x0000000000400552 in tail_rec (number=8) at tail_recursion.c:8
#9  0x0000000000400552 in tail_rec (number=9) at tail_recursion.c:8
#10 0x0000000000400552 in tail_rec (number=10) at tail_recursion.c:8
#11 0x0000000000400569 in main () at tail_recursion.c:13

Claramente se puede observar que el stack no tiene un tamaño constante si no más bien lineal.

Ahora veamos qué sucede si compilamos con el poderoso gcc (o clang) junto con la flag -O[some_level]+ el mismo programa
donde some_level = 0 < i < 3
La salida en pantalla que se obtuvo al ejecutar el código es:
$ gcc -g -O1 tail_recursion.c -o t_rec && gdb t_rec
(gdb) b 4
Punto de interrupción 1 at 0x40055d: file tail_recursion.c, line 4.
(gdb) run 
Starting program: /home/javier/Escritorio/para2015/lab4/lang-tests/test-5/t_rec 

Breakpoint 1, tail_rec (number=number@entry=10) at tail_recursion.c:5
5           return 1;
(gdb) bt
#0  tail_rec (number=number@entry=10) at tail_recursion.c:5
#1  0x0000000000400589 in main () at tail_recursion.c:13
(gdb) 

Donde claramente se puede ver que se hace una única llamada!! WOW!
___

En ruby hay optimización aunque se debe ser explícito para poder utilizarla. Desafortunadamente no se pudo comprobar realmente su optimización. A continuación el código que 'intenta' tener un stack de tamaño menor:

def tail_rec(number, acc)
    if number == 0 then
        return 1/0
    else
        return tail_rec(number-1, acc)
    end
end

tail_rec(5, 0)

La salida en pantalla que se obtuvo al ejecutar el código es:
 $ ruby tail_recursion.rb
res=tail_recursion.rb:3:in `/': divided by 0 (ZeroDivisionError)
    from tail_recursion.rb:3:in `tail_rec'
    from tail_recursion.rb:5:in `tail_rec'
    from tail_recursion.rb:5:in `tail_rec'
    from tail_recursion.rb:5:in `tail_rec'
    from tail_recursion.rb:5:in `tail_rec'
    from tail_recursion.rb:5:in `tail_rec'
    from tail_recursion.rb:10:in `<main>'
___

Haskell también permite optimizar a la cola utilizando el prefijo '-O2' al momento de compilar. El siguiente código muestra una función recursiva:

module Main where
import Debug.Trace


factorial :: Int -> Int
factorial n | n == 0    = traceStack ("Last case") 1
            | otherwise = n * (factorial $ n - 1)

main = do
    putStrLn $ "factorial 20: " ++ show (factorial 20)

___

Java no dispone de una optimización a la cola:

class TailRec {
    public static int t_rec(int n) {
        if (n == 0) {
            for (StackTraceElement ste : Thread.currentThread().getStackTrace()) 
            {
                System.out.println(ste);
            }


            return 1;
        }
        else {
            return 1 + t_rec(n-1);
        }
    }
    public static void main(String[] args) {
        int res = t_rec(10);
        System.out.println("t_rec(10) =>"+res);
    }
}

ó el código

class TailRec {
    public static int t_rec(int n, int acc) {
        if (n == 0) {
            for (StackTraceElement ste : Thread.currentThread().getStackTrace()) 
            {
                System.out.println(ste);
            }
            return 1+acc;
        }
        else {
            return t_rec(n-1, acc+1);
        }
    }
    public static void main(String[] args) {
        int res = t_rec(10, 0);
        System.out.println("t_rec(10) =>"+res);
    }
}

demuestran al momento de compilar que Java no dispone de una TCO.

La salida en pantalla que se obtuvo al ejecutar el código es:
 $ javac tail_recursion_optimized.java && java TailRec 
java.lang.Thread.getStackTrace(Thread.java:1589)
TailRec.t_rec(tail_recursion_optimized.java:4)
TailRec.t_rec(tail_recursion_optimized.java:11)
TailRec.t_rec(tail_recursion_optimized.java:11)
TailRec.t_rec(tail_recursion_optimized.java:11)
TailRec.t_rec(tail_recursion_optimized.java:11)
TailRec.t_rec(tail_recursion_optimized.java:11)
TailRec.t_rec(tail_recursion_optimized.java:11)
TailRec.t_rec(tail_recursion_optimized.java:11)
TailRec.t_rec(tail_recursion_optimized.java:11)
TailRec.t_rec(tail_recursion_optimized.java:11)
TailRec.t_rec(tail_recursion_optimized.java:11)
TailRec.main(tail_recursion_optimized.java:15)
t_rec(10) =>11
____

Y aunque no lo parezca, Scala si soporta TCO!!:

import scala.annotation.tailrec
object RecOpt {

    @tailrec def factorialAcc(acc: Int, n: Int): Int = {
        if (n <= 1) return 1/0;
        else return factorialAcc(n * acc, n - 1);
    }

    def main (args: Array[String]) {
        try { 
            factorialAcc(1, 10);
        } catch {
            case e: Exception => e.printStackTrace;
            System.exit(1);
        }
    }
}

(fuente: http://stackoverflow.com/questions/1677419/does-scala-support-tail-recursion-optimization)

Utilizamos la estrategia de generar una excepción para mostrar el backtrace del stack donde en este caso, a nosotros sólo nos interesa las llamadas a nuestra clase.
Un detalle no menor, es que las optimizaciones no son tan mágicas como las del compilador de C, de tal forma que al menos en las pruebas realizadas sólo se aplica la optimización cuando hay sólo acumuladores.

La salida en pantalla que se obtuvo al ejecutar el código es:

$ scala RecOp
java.lang.ArithmeticException: / by zero
    at RecOp$.factorialAcc(tail_recursion_optimized.scala:5)
    at RecOp$.main(tail_recursion_optimized.scala:11)
    at RecOp.main(tail_recursion_optimized.scala)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    ...
    ...

Ahora bien, si no hubiera tenido un acumulador:

object RecOp {

    def factorialAcc(n: Int): Int = {
        if (n <= 1) return 1/0;
        else return n*factorialAcc(n - 1);
    }

    def main (args: Array[String]) {
        try { 
            factorialAcc(10);
        } catch {
            case e: Exception => e.printStackTrace;
            System.exit(1);
        }
    }
}

La salida en pantalla que se obtuvo al ejecutar el código es:
 $ scala RecOp
java.lang.ArithmeticException: / by zero
    at RecOp$.factorialAcc(tail_recursion.scala:4)
    at RecOp$.factorialAcc(tail_recursion.scala:5)
    at RecOp$.factorialAcc(tail_recursion.scala:5)
    at RecOp$.factorialAcc(tail_recursion.scala:5)
    at RecOp$.factorialAcc(tail_recursion.scala:5)
    at RecOp$.factorialAcc(tail_recursion.scala:5)
    at RecOp$.factorialAcc(tail_recursion.scala:5)
    at RecOp$.factorialAcc(tail_recursion.scala:5)
    at RecOp$.factorialAcc(tail_recursion.scala:5)
    at RecOp$.factorialAcc(tail_recursion.scala:5)
    at RecOp$.main(tail_recursion.scala:10)
    at RecOp.main(tail_recursion.scala)

Por lo tanto en scala hay optimización a la cola.
___
Javascript no tiene TCO por el momento dado que es un lenguaje muy flexible y compatible para gran cantidad de navegadores.
A mi entender, este tipo re chequeo y optimización implicaría un gran trabajo por delante y no descarto la posibilidad de que más adelante se lleve a cabo de manera estandarizada.
El siguiente código muestra una recursión a la cola:

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>t_rec.js</title>
</head>
<body>
    <h2>Test a tail recursion in javascript</h2>
    <script type="text/javascript">
        function rec (n) {
            if (n == 0) {
                console.trace();
                return 1;
            }
            else {
                return rec(n-1);
            }
        };
        var res = rec(10);
        console.log(res);
    </script>
</html>

La salida en pantalla que se obtuvo al ejecutar el código es:

$ firefox tail_recursion.html &
[Presiono ctrl+shift+k]

console.trace(): tail_recursion.html:12
rec() tail_recursion.html:12
rec() tail_recursion.html:16
rec() tail_recursion.html:16
rec() tail_recursion.html:16
rec() tail_recursion.html:16
rec() tail_recursion.html:16
rec() tail_recursion.html:16
rec() tail_recursion.html:16
rec() tail_recursion.html:16
rec() tail_recursion.html:16
rec() tail_recursion.html:16
<anónima>
___