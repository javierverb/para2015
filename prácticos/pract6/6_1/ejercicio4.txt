4- Dibuje la jerarquÄ±a de clases en que se basa el siguiente codigo.
-------------------------------------------------------------------------------
A)
===============================================================================
class Vehicle{
public :
    explicit
    Vehicle(int topSpeed)
    : m_topSpeed (topSpeed)
    {}
    int TopSpeed() const{
        return m_topSpeed;
    }

    virtual void Save(std::ostream&) const = 0;

private :
    int m_topSpeed;
};

class WheeledLandVehicle : public Vehicle{
public:
    WheeledLandVehicle(int topSpeed, int numberOfWheels)
    : Vehicle (topSpeed), m_numberOfWheels(numberOfWheels)
    {}
    int NumberOfWheels() const{
        return m_numberOfWheels;
    }

    void Save(std::ostream&) const; // is implicitly virtual

private:
    int m_numberOfWheels ;
};

class TrackedLandVehicle : public Vehicle {
public:
    TrackedLandVehicle(int topSpeed, int numberOfTracks)
    : Vehicle ( topSpeed ) , m_numberOfTracks ( numberOfTracks )
    {}
    int NumberOfTracks() const{
        return m_numberOfTracks;
    }
    void Save(std::ostream&) const; // is implicitly virtual

private:
    int m_numberOfTracks;
};
===============================================================================


B)
===============================================================================
class DrawableObject
{
    // draw to GraphicalDrawingBoard
    public virtual void Draw(GraphicalDrawingBoard&) const = 0;
};

class Triangle: public DrawableObject
{
    public void Draw (GraphicalDrawingBoard&) const; // draw a triangle
};

class Rectangle: public DrawableObject
{
    public void Draw (GraphicalDrawingBoard&) const; // draw a rectangle
};

class Circle: public DrawableObject
{
    public void Draw (GraphicalDrawingBoard&) const; // draw a circle
};

typedef std :: list <DrawableObject*> DrawableList;

DrawableList drawableList;
GraphicalDrawingBoard drawingBoard;

drawableList.pushback(new Triangle());
drawableList.pushback(new Rectangle ());
drawableList.pushback(new Circle ());

for ( DrawableList :: const_iterator iter = drawableList.begin(),
    endIter = drawableList.end();
    iter != endIter;
    ++ iter)
{
    DrawableObject *object = *iter;
    object -> Draw (drawingBoard);
}
===============================================================================